##########################################################################
# Pre-Facet Target Calibration Pipeline                                  #
#                                                                        #
# Target part of the basic Pre-Facet calibration pipeline:               #
# - requires LOFAR software version  >= 3.1.0                            #
# - requires losoto software version >= 2.0.0                            #
# - expects shared filesystem, that all nodes can reach all files!       #
#   (E.g. a single workstation or compute cluster with shared filesystem #
#   doesn't work on multiple nodes on CEP3.)                             #
##########################################################################

##########################################
### parameters you will need to adjust. ##
##########################################

## information about the target data
! target_input_path        =  /data/scratch/drabent                  ## specify the directory where your calibrator data is stored
! target_input_pattern     =  L228161*.MS                            ## regular expression pattern of all your calibrator files

## location of the software
! prefactor_directory      =  /home/drabent/prefactor/               ## path to your prefactor copy
! losoto_directory         =  /home/fdg/losoto                       ## path to your local LoSoTo installation

##########################################
### parameters you may need to adjust   ##
##########################################

! refant                   = 'CS001HBA0'                             ## name of the station that will be used as a reference for the phase-plots
! flag_baselines           =  []                                     ## NDPPP-compatible pattern for baselines or stations to be flagged (may be an empty list, i.e.: [] )
! do_smooth                =  False                                  ## enable or disable baseline-based smoothing
! rfistrategy              =  HBAdefault                             ## strategy to be applied with the statistical flagger (AOFlagger)
! min_unflagged_fraction   =  0.5                                    ## minimum fraction of unflagged data after RFI flagging and A-team clipping

# definitions for pipeline options
! substep                  =  clipATeam,                             ## set empty if you want to skip A-Team clipping
##########################################
### parameters for pipeline performance ##
##########################################

! num_proc_per_node        =  input.output.max_per_node              ## number of processes to use per step per node (usually max_per_node from pipeline.cfg)
! num_proc_per_node_limit  =  4                                      ## number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! max_dppp_threads         =  10                                     ## number of threads per process for NDPPP

! error_tolerance          =  False                                  ## set this to True if you want the pipeline run to continue if single bands fail

##########################################
### parameters you may want to adjust   ##
##########################################

## main directories
! lofar_directory          =  $LOFARROOT                             ## base directory of your LOFAR installation
! job_directory            =  input.output.job_directory             ## directory of the prefactor outputs

## script and plugin directories
! scripts                  =  {{ prefactor_directory }}/scripts
pipeline.pluginpath        =  {{ prefactor_directory }}/plugins

## skymodel directory
! target_skymodel          =  {{ job_directory }}/target.skymodel    ## path to the skymodel for the phase-only calibration of the target
! use_tgss_target          =  True                                   ## download the phase-only calibration skymodel from TGSS, "Force" : always download , "True" download if {{ target_skymodel }} does not exist , "False" : never download

## result directories
! results_directory        =  {{ job_directory }}/results            ## location of the results
! inspection_directory     =  {{ results_directory }}/inspection     ## directory where the inspection plots will be stored
! cal_values_directory     =  {{ results_directory }}/cal_values     ## directory where the final h5parm solution set will be stored

## calibrator solutions
! cal_solutions            =  {{ cal_values_directory }}/cal_solutions.h5

## averaging for the target data
! avg_timeresolution       =  4.        # average to 4 sec/timeslot
! avg_freqresolution       =  48.82kHz  # average to 48.82 kHz/ch (= 4 ch/SB)

## concatenating the target data
! num_SBs_per_group        =  10        # make concatenated measurement-sets with that many subbands
! reference_stationSB      =  None      # station-subband number to use as reference for grouping, "None" -> use lowest frequency input data as reference

## RMextract settings
! ionex_server             =  "ftp://ftp.aiub.unibe.ch/CODE/" # to download from the "standard" server
! ionex_prefix             =  CODG                            # the prefix of the IONEX files
! ionex_path               =  {{ job_directory }}/IONEX/     # path where the IONEX files can be stored or are already stored

########################################################
##                                                    ##
##    BEGIN PIPELINE: DO NOT UPDATE BELOW THIS LINE!  ##
##                                                    ##
########################################################

# which steps to run
pipeline.steps             =  [prep, {{ substep }} concat]

# pipeline substeps
pipeline.steps.prep        =  [createmap_target, combine_data_target_map, get_ion_files, ndppp_prep_target]
pipeline.steps.clipATeam   =  [create_ateam_model_map, make_sourcedb_ateam, expand_sourcedb_ateam, predict_ateam, ateamcliptar]
pipeline.steps.concat      =  [combine_target_map, ms_concat_target, ndppp_flag_target, sortmap_target, do_sortmap_maps, dpppconcat]

#############################
## Prepare target part     ##
#############################
# generate a mapfile of all the target data
createmap_target.control.kind                                  =   plugin
createmap_target.control.type                                  =   createMapfile
createmap_target.control.method                                =   mapfile_from_folder
createmap_target.control.mapfile_dir                           =   input.output.mapfile_dir
createmap_target.control.filename                              =   createmap_target.mapfile
createmap_target.control.folder                                =   {{ target_input_path }}
createmap_target.control.pattern                               =   {{ target_input_pattern }}

# combine all entries into one mapfile, for the sortmap script
combine_data_target_map.control.kind                           =   plugin
combine_data_target_map.control.type                           =   createMapfile
combine_data_target_map.control.method                         =   mapfile_all_to_one
combine_data_target_map.control.mapfile_dir                    =   input.output.mapfile_dir
combine_data_target_map.control.filename                       =   combine_data_tar_map.mapfile
combine_data_target_map.control.mapfile_in                     =   createmap_target.output.mapfile

#############################
## RM target correction    ##
#############################
# get ionex files once for every day that is covered by one of the input MSs
get_ion_files.control.type                                     =   pythonplugin
get_ion_files.control.executable                               =   {{ scripts }}/download_IONEX.py
get_ion_files.control.max_per_node                             =   1
get_ion_files.control.error_tolerance                          =   {{ error_tolerance }}
get_ion_files.argument.flags                                   =   [combine_data_target_map.output.mapfile]
get_ion_files.argument.ionex_server                            =   {{ ionex_server }}
get_ion_files.argument.ionex_prefix                            =   {{ ionex_prefix }}
get_ion_files.argument.ionexPath                               =   {{ ionex_path }}

#############################
## Apply calibrator sols   ##
#############################
# run NDPPP on the target data to flag, transfer calibrator values, and average
ndppp_prep_target.control.type                                 =   dppp
ndppp_prep_target.control.max_per_node                         =   {{ num_proc_per_node_limit }}
ndppp_prep_target.control.error_tolerance                      =   {{ error_tolerance }}
ndppp_prep_target.control.mapfiles_in                          =   [createmap_target.output.mapfile]
ndppp_prep_target.control.inputkeys                            =   [input_file]
ndppp_prep_target.argument.numthreads                          =   {{ max_dppp_threads }}
ndppp_prep_target.argument.msin                                =   input_file
ndppp_prep_target.argument.msin.datacolumn                     =   DATA
ndppp_prep_target.argument.msin.baseline                       =   CS*&; RS*&; CS*&RS*
ndppp_prep_target.argument.msout.datacolumn                    =   DATA
ndppp_prep_target.argument.msout.writefullresflag              =   False
ndppp_prep_target.argument.msout.overwrite                     =   True
ndppp_prep_target.argument.msout.storagemanager.databitrate    =   0
ndppp_prep_target.argument.msout.storagemanager.weightbitrate  =   12
ndppp_prep_target.argument.msout.storagemanager.distribution   =   "TruncatedGaussian"
ndppp_prep_target.argument.msout.storagemanager.disttruncation =   1.5
ndppp_prep_target.argument.msout.storagemanager.normalization  =   "AF"
ndppp_prep_target.argument.steps                               =   [flag,elev,filter,flagamp,applyclock,applyPA,applybandpass,applybeam,applyRM,count,avg]
ndppp_prep_target.argument.flag.type                           =   preflagger
ndppp_prep_target.argument.flag.baseline                       =   {{ flag_baselines }}
ndppp_prep_target.argument.elev.type                           =   preflagger
ndppp_prep_target.argument.elev.elevation                      =   0deg..20deg
ndppp_prep_target.argument.filter.type                         =   filter
ndppp_prep_target.argument.filter.baseline                     =   CS*, RS*&&
ndppp_prep_target.argument.filter.remove                       =   true                     # fully kick out the international stations.
ndppp_prep_target.argument.flagamp.type                        =   preflagger
ndppp_prep_target.argument.flagamp.amplmin                     =   1e-30
ndppp_prep_target.argument.applyclock.type                     =   applycal
ndppp_prep_target.argument.applyclock.parmdb                   =   {{ cal_solutions }}
ndppp_prep_target.argument.applyclock.correction               =   clock
ndppp_prep_target.argument.applyPA.type                        =   applycal
ndppp_prep_target.argument.applyPA.parmdb                      =   {{ cal_solutions }}
ndppp_prep_target.argument.applyPA.correction                  =   polalign
ndppp_prep_target.argument.applybandpass.type                  =   applycal
ndppp_prep_target.argument.applybandpass.parmdb                =   {{ cal_solutions }}
ndppp_prep_target.argument.applybandpass.correction            =   amplitudeSmooth000
ndppp_prep_target.argument.applybandpass.updateweights         =   True
ndppp_prep_target.argument.applybeam.type                      =   applybeam
ndppp_prep_target.argument.applybeam.usechannelfreq            =   True
ndppp_prep_target.argument.applybeam.updateweights             =   True
ndppp_prep_target.argument.applyRM.type                        =   applycal
ndppp_prep_target.argument.applyRM.parmdb                      =   {{ cal_solutions }}
ndppp_prep_target.argument.applyRM.correction                  =   RMextract
ndppp_prep_target.argument.avg.type                            =   average
ndppp_prep_target.argument.avg.timeresolution                  =   {{ avg_timeresolution }}
ndppp_prep_target.argument.avg.freqresolution                  =   {{ avg_freqresolution }}

#############################
##     Clip A-Team         ##
#############################
# create a mapfile with the A-Team skymodel, length = 1
create_ateam_model_map.control.kind                            =   plugin
create_ateam_model_map.control.type                            =   addListMapfile
create_ateam_model_map.control.hosts                           =   ['localhost']
create_ateam_model_map.control.files                           =   [ {{ prefactor_directory }}/skymodels/Ateam_LBA_CC.skymodel ]
create_ateam_model_map.control.mapfile_dir                     =   input.output.mapfile_dir
create_ateam_model_map.control.filename                        =   ateam_model_name.mapfile

# make sourcedbs from the A-Team skymodel, length = 1
make_sourcedb_ateam.control.kind                               =   recipe
make_sourcedb_ateam.control.type                               =   executable_args
make_sourcedb_ateam.control.executable                         =   {{ lofar_directory }}/bin/makesourcedb
make_sourcedb_ateam.control.error_tolerance                    =   {{ error_tolerance }}
make_sourcedb_ateam.control.args_format                        =   lofar
make_sourcedb_ateam.control.outputkey                          =   out
make_sourcedb_ateam.control.mapfile_in                         =   create_ateam_model_map.output.mapfile
make_sourcedb_ateam.control.inputkey                           =   in
make_sourcedb_ateam.argument.format                            =   <
make_sourcedb_ateam.argument.outtype                           =   blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_ateam.control.kind                             =   plugin
expand_sourcedb_ateam.control.type                             =   expandMapfile
expand_sourcedb_ateam.control.mapfile_in                       =   make_sourcedb_ateam.output.mapfile
expand_sourcedb_ateam.control.mapfile_to_match                 =   ndppp_prep_target.output.mapfile
expand_sourcedb_ateam.control.mapfile_dir                      =   input.output.mapfile_dir
expand_sourcedb_ateam.control.filename                         =   expand_sourcedb_ateam.datamap

# Predict, corrupt, and predict the ateam-resolution model, length = nfiles
predict_ateam.control.type                                     =   dppp
predict_ateam.control.mapfiles_in                              =   [ndppp_prep_target.output.mapfile,expand_sourcedb_ateam.output.mapfile]
predict_ateam.control.inputkeys                                =   [msin,sourcedb]
predict_ateam.control.inplace                                  =   True
predict_ateam.control.max_per_node                             =   {{ num_proc_per_node_limit }}
predict_ateam.argument.numthreads                              =   {{ max_dppp_threads }}
predict_ateam.control.error_tolerance                          =   {{ error_tolerance }}
predict_ateam.argument.msin.datacolumn                         =   DATA
predict_ateam.argument.msin.baseline                           =   [CR]S*&
predict_ateam.argument.msout.datacolumn                        =   MODEL_DATA
predict_ateam.argument.msout.storagemanager.databitrate        =   0
predict_ateam.argument.msout.storagemanager.weightbitrate      =   12
predict_ateam.argument.msout.storagemanager.distribution       =   "TruncatedGaussian"
predict_ateam.argument.msout.storagemanager.disttruncation     =   1.5
predict_ateam.argument.msout.storagemanager.normalization      =   "AF"
predict_ateam.argument.steps                                   =   [predict]
predict_ateam.argument.predict.type                            =   predict
predict_ateam.argument.predict.operation                       =   replace
predict_ateam.argument.predict.sourcedb                        =   sourcedb
predict_ateam.argument.predict.sources                         =   [VirA_4_patch,CygAGG,CasA_4_patch,TauAGG]
predict_ateam.argument.predict.usebeammodel                    =   True
predict_ateam.argument.predict.usechannelfreq                  =   false

# run the a-team clipper to flag data affected by the a-team
ateamcliptar.control.kind                                      =   recipe
ateamcliptar.control.type                                      =   executable_args
ateamcliptar.control.max_per_node                              =   {{ num_proc_per_node }}
ateamcliptar.control.executable                                =   {{ scripts }}/Ateamclipper.py
ateamcliptar.control.error_tolerance                           =   {{ error_tolerance }}
ateamcliptar.control.mapfile_in                                =   ndppp_prep_target.output.mapfile
ateamcliptar.control.arguments                                 =   [allms]
ateamcliptar.control.inputkey                                  =   allms

#############################
##     concatenate         ##
#############################
# combine all entries into one mapfile, for the sortmap script
combine_target_map.control.kind                                =   plugin
combine_target_map.control.type                                =   createMapfile
combine_target_map.control.method                              =   mapfile_all_to_one
combine_target_map.control.mapfile_dir                         =   input.output.mapfile_dir
combine_target_map.control.filename                            =   combine_tar_map.mapfile
combine_target_map.control.mapfile_in                          =   ndppp_prep_target.output.mapfile

# virtually concatenate target subbands
ms_concat_target.control.type                                  =   pythonplugin
ms_concat_target.control.executable                            =   {{ scripts }}/concat_MS.py
ms_concat_target.control.error_tolerance                       =   {{ error_tolerance }}
ms_concat_target.argument.flags                                =   [combine_target_map.output.mapfile,outputkey]

# run NDPPP on the calibrator data
ndppp_flag_target.control.type                                 =   dppp
ndppp_flag_target.control.max_per_node                         =   {{ num_proc_per_node_limit }}
ndppp_flag_target.control.inplace                              =   True
ndppp_flag_target.control.error_tolerance                      =   {{ error_tolerance }}
ndppp_flag_target.argument.numthreads                          =   {{ num_proc_per_node }}
ndppp_flag_target.argument.msin                                =   ms_concat_target.output.mapfile    # The input data.
ndppp_flag_target.argument.msin.datacolumn                     =   DATA
ndppp_flag_target.argument.steps                               =   [flag]
ndppp_flag_target.argument.flag.type                           =   aoflagger
ndppp_flag_target.argument.flag.keepstatistics                 =   True
ndppp_flag_target.argument.flag.strategy                       =   {{ lofar_directory }}/share/rfistrategies/{{ rfistrategy }}
ndppp_prep_target.argument.flag.memoryperc                     =   90

# sort the target data by frequency into groups so that NDPPP can concatenate them
sortmap_target.control.type                                    =   pythonplugin
sortmap_target.control.executable                              =   {{ scripts }}/sort_times_into_freqGroups.py
sortmap_target.argument.flags                                  =   [combine_target_map.output.mapfile]
sortmap_target.argument.filename                               =   sortmap_target
sortmap_target.argument.mapfile_dir                            =   input.output.mapfile_dir
sortmap_target.argument.target_path                            =   input.output.working_directory/input.output.job_name
sortmap_target.argument.numSB                                  =   {{ num_SBs_per_group }}
sortmap_target.argument.NDPPPfill                              =   True
sortmap_target.argument.stepname                               =   dpppconcat
sortmap_target.argument.firstSB                                =   {{ reference_stationSB }}
sortmap_target.argument.truncateLastSBs                        =   False

# convert the output of sortmap_target into usable mapfiles
do_sortmap_maps.control.kind                                   =   plugin
do_sortmap_maps.control.type                                   =   mapfilenamesFromMapfiles
do_sortmap_maps.control.mapfile_groupmap                       =   sortmap_target.output.groupmapfile.mapfile
do_sortmap_maps.control.mapfile_datamap                        =   sortmap_target.output.mapfile.mapfile

# run NDPPP to concatenate the target
dpppconcat.control.type                                        =   dppp
dpppconcat.control.max_per_node                                =   {{ num_proc_per_node_limit }}
dpppconcat.control.error_tolerance                             =   {{ error_tolerance }}
dpppconcat.control.mapfile_out                                 =   do_sortmap_maps.output.groupmap # tell the pipeline to give the output useful names
dpppconcat.control.mapfiles_in                                 =   [do_sortmap_maps.output.datamap]
dpppconcat.control.inputkey                                    =   msin
dpppconcat.argument.msin.datacolumn                            =   DATA
dpppconcat.argument.msin.missingdata                           =   True    #\ these two lines will make NDPPP generate dummy data when
dpppconcat.argument.msin.orderms                               =   False   #/ concatenating data
dpppconcat.argument.msout.datacolumn                           =   DATA
dpppconcat.argument.msout.writefullresflag                     =   False
dpppconcat.argument.msout.overwrite                            =   True
dpppconcat.argument.steps                                      =   [count]      # run the aoflagger (this used to be an extra step)

########################################################
##                                                    ##
##                  END PIPELINE                      ##
##                                                    ##
########################################################

# check all files for minimum unflagged fraction
# check_unflagged.control.type            =  pythonplugin
# check_unflagged.control.executable      =  {{ check_flagged_script }}
# check_unflagged.argument.flags          =  [dpppconcat.output.mapfile]
# check_unflagged.argument.min_fraction   =  {{ min_unflagged_fraction }}
# # this step writes hostnames into "check_unflagged.flagged.mapfile" due to a "feature" of the pythonplugin
# 
# # prune flagged files from mapfile
# check_unflagged_map.control.kind               =  plugin
# check_unflagged_map.control.type               =  pruneMapfile
# check_unflagged_map.control.mapfile_in         =  check_unflagged.output.flagged.mapfile
# check_unflagged_map.control.mapfile_dir        =  input.output.mapfile_dir
# check_unflagged_map.control.filename           =  check_unflagged_map.mapfile
# check_unflagged_map.control.prune_str          =  None
# 
# # if wished, download the tgss skymodel for the target
# sky_tar.control.type               =  pythonplugin
# sky_tar.control.executable         =  {{ get_tgss_skymodel_script }}
# sky_tar.argument.flags             =  [combine_target_map.output.mapfile]
# sky_tar.argument.DoDownload        =  {{ use_tgss_target }}
# sky_tar.argument.SkymodelPath      =  {{ target_skymodel }}
# sky_tar.argument.Radius            =  5. #in degrees
# 
# # create a mapfile with the target skymodel, length = 1
# create_target_model_map.control.kind              =  plugin
# create_target_model_map.control.type              =  addListMapfile
# create_target_model_map.control.hosts             =  ['localhost']
# create_target_model_map.control.files             =  [ {{ target_skymodel }} ]
# create_target_model_map.control.mapfile_dir       =  input.output.mapfile_dir
# create_target_model_map.control.filename          =  target_model_name.mapfile
# 
# # make sourcedbs from the target skymodel, length = 1
# # outtype = blob, because NDPPP likes that
# make_sourcedb_target.control.kind                 =  recipe
# make_sourcedb_target.control.type                 =  executable_args
# make_sourcedb_target.control.executable           =  {{ makesourcedb }}
# make_sourcedb_target.control.error_tolerance      =  {{ error_tolerance }}
# make_sourcedb_target.control.args_format          =  lofar
# make_sourcedb_target.control.outputkey            =  out
# make_sourcedb_target.control.mapfile_in           =  create_target_model_map.output.mapfile
# make_sourcedb_target.control.inputkey             =  in
# make_sourcedb_target.argument.format              =  <
# make_sourcedb_target.argument.outtype             =  blob
# 
# # expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
# expand_sourcedb_target.control.kind               =  plugin
# expand_sourcedb_target.control.type               =  expandMapfile
# expand_sourcedb_target.control.mapfile_in         =  make_sourcedb_target.output.mapfile
# expand_sourcedb_target.control.mapfile_to_match   =  check_unflagged_map.output.mapfile
# expand_sourcedb_target.control.mapfile_dir        =  input.output.mapfile_dir
# expand_sourcedb_target.control.filename           =  expand_sourcedb_target.datamap
# 
# # generate mapfile with the parmDB names to be used in the gsmcal steps
# gsmcal_parmmap.control.kind               =  plugin
# gsmcal_parmmap.control.type               =  createMapfile
# gsmcal_parmmap.control.method             =  add_suffix_to_file
# gsmcal_parmmap.control.mapfile_in         =  check_unflagged_map.output.mapfile
# gsmcal_parmmap.control.add_suffix_to_file =  /instrument_directionindependent
# gsmcal_parmmap.control.mapfile_dir        =  input.output.mapfile_dir
# gsmcal_parmmap.control.filename           =  gsmcal_parmdbs.mapfile
# 
# # solve for phase-only calibration solutions
# # solve and apply are seperate to allow to solve on a subset of baselines but apply to all
# gsmcal_solve.control.type                             = dppp
# gsmcal_solve.control.environment                      = {OMP_NUM_THREADS: 4}
# gsmcal_solve.control.error_tolerance                  = {{ error_tolerance }}
# gsmcal_solve.control.inplace                          = True
# gsmcal_solve.control.max_per_node                     = {{ num_proc_per_node_limit }}
# gsmcal_solve.argument.numthreads                      = {{ max_dppp_threads }}
# gsmcal_solve.argument.msin                            = check_unflagged_map.output.mapfile
# gsmcal_solve.argument.msin.datacolumn                 = DATA
# gsmcal_solve.argument.msin.baseline                   = CS*&; RS*&; CS*&RS*
# gsmcal_solve.argument.msout.datacolumn                = CORRECTED_DATA
# gsmcal_solve.argument.steps                           = [filter,gaincal]
# gsmcal_solve.filter.type                              = filter
# gsmcal_solve.filter.blrange                           = [150, 999999]
# gsmcal_solve.argument.gaincal.type                    = gaincal
# gsmcal_solve.argument.gaincal.maxiter                 = 500
# gsmcal_solve.argument.gaincal.caltype                 = phaseonly
# gsmcal_solve.argument.gaincal.nchan                   = 0
# gsmcal_solve.argument.gaincal.solint                  = 1
# gsmcal_solve.argument.gaincal.sourcedb                = expand_sourcedb_target.output.mapfile
# gsmcal_solve.argument.gaincal.parmdb                  = gsmcal_parmmap.output.mapfile
# gsmcal_solve.argument.gaincal.usebeammodel            = True
# gsmcal_solve.argument.gaincal.usechannelfreq          = True
# gsmcal_solve.argument.gaincal.beammode                = array_factor
# 
# # apply the phase-only calibration solutions
# # solve and apply are separate to allow to solve on a subset of baselines but apply to all
# gsmcal_apply.control.type                             = dppp
# gsmcal_apply.control.error_tolerance                  = {{ error_tolerance }}
# gsmcal_apply.control.inplace                          = True
# gsmcal_apply.control.max_per_node                     = {{ num_proc_per_node_limit }}
# gsmcal_apply.argument.numthreads                      = {{ max_dppp_threads }}
# gsmcal_apply.argument.msin                            = check_unflagged_map.output.mapfile
# gsmcal_apply.argument.msin.datacolumn                 = DATA
# gsmcal_apply.argument.msout.datacolumn                = CORRECTED_DATA
# gsmcal_apply.argument.msout.writefullresflag          = False
# gsmcal_apply.argument.steps                           = [applycal]
# gsmcal_apply.argument.applycal.type                   = applycal
# gsmcal_apply.argument.applycal.correction             = gain
# gsmcal_apply.argument.applycal.parmdb                 = gsmcal_parmmap.output.mapfile
# 
# # generate a mapfile with all files in a single entry
# h5_imp_gsmsol_map.control.kind               =  plugin
# h5_imp_gsmsol_map.control.type               =  MapfileToOne
# h5_imp_gsmsol_map.control.method             =  mapfile_all_to_one
# h5_imp_gsmsol_map.control.mapfile_in         =  check_unflagged_map.output.mapfile
# h5_imp_gsmsol_map.control.mapfile_dir        =  input.output.mapfile_dir
# h5_imp_gsmsol_map.control.filename           =  h5_imp_gsmsol_map.mapfile
# 
# # import all instrument tables into one LoSoTo file
# h5imp_gsmsol.control.type            =  pythonplugin
# h5imp_gsmsol.control.executable      =  {{ losoto_importer }}
# h5imp_gsmsol.control.error_tolerance =  {{ error_tolerance }}
# h5imp_gsmsol.argument.flags          =  [h5_imp_gsmsol_map.output.mapfile,h5imp_gsmsol_losoto.h5]
# h5imp_gsmsol.argument.instrument     =  /instrument_directionindependent
# h5imp_gsmsol.argument.solsetName     =  sol000
# h5imp_gsmsol.argument.compression    =  7
# 
# # plot the phase solutions from the phase-only calibration of the target
# plot_gsm_phases.control.kind                          =  recipe
# plot_gsm_phases.control.type                          =  executable_args
# plot_gsm_phases.control.executable                    =  {{ losoto_executable }}
# plot_gsm_phases.control.max_per_node                  =  {{ num_proc_per_node }}
# plot_gsm_phases.control.parsetasfile                  =  True
# plot_gsm_phases.control.args_format                   =  losoto
# plot_gsm_phases.control.mapfiles_in                   =  [h5imp_gsmsol.output.h5parm.mapfile]
# plot_gsm_phases.control.inputkeys                     =  [hdf5file]
# plot_gsm_phases.argument.flags                        =  [hdf5file]
# plot_gsm_phases.argument.LoSoTo.Steps                 =  [plot]
# plot_gsm_phases.argument.LoSoTo.Solset                =  [sol000]
# plot_gsm_phases.argument.LoSoTo.Soltab                =  [sol000/phase000]
# plot_gsm_phases.argument.LoSoTo.SolType               =  [phase]
# plot_gsm_phases.argument.LoSoTo.ant                   =  []
# plot_gsm_phases.argument.LoSoTo.pol                   =  [XX,YY]
# plot_gsm_phases.argument.LoSoTo.dir                   =  [pointing]
# plot_gsm_phases.argument.LoSoTo.Steps.plot.Operation  =  PLOT
# plot_gsm_phases.argument.LoSoTo.Steps.plot.PlotType   =  2D
# plot_gsm_phases.argument.LoSoTo.Steps.plot.Axes       =  [time,freq]
# plot_gsm_phases.argument.LoSoTo.Steps.plot.TableAxis  =  [ant]
# plot_gsm_phases.argument.LoSoTo.Steps.plot.ColorAxis  =  [pol]
# plot_gsm_phases.argument.LoSoTo.Steps.plot.Reference  =  {{ reference_station }}
# plot_gsm_phases.argument.LoSoTo.Steps.plot.PlotFlag   =  False
# plot_gsm_phases.argument.LoSoTo.Steps.plot.Prefix     =  {{ inspection_directory }}/gsm_phases_
# 
# # generate mapfile with the antenna tables of the concatenated target datafiles
# gsmcal_antmap.control.kind               =  plugin
# gsmcal_antmap.control.type               =  createMapfile
# gsmcal_antmap.control.method             =  add_suffix_to_file
# gsmcal_antmap.control.mapfile_in         =  dpppconcat.output.mapfile
# gsmcal_antmap.control.add_suffix_to_file =  /ANTENNA
# gsmcal_antmap.control.mapfile_dir        =  input.output.mapfile_dir
# gsmcal_antmap.control.filename           =  gsmcal_antmaps.mapfile
# 
# # plot the phase solutions from the phase-only calibration of the target
# make_structurefunction.control.kind               =  recipe
# make_structurefunction.control.type               =  executable_args
# make_structurefunction.control.executable         =  {{ structurefunction_script }}
# make_structurefunction.control.max_per_node       =  {{ num_proc_per_node }}
# make_structurefunction.control.mapfiles_in        =  [gsmcal_parmmap.output.mapfile,gsmcal_antmap.output.mapfile,check_unflagged_map.output.mapfile]
# make_structurefunction.control.inputkeys          =  [inparmdb,inants,outbase]
# make_structurefunction.control.arguments          =  [inparmdb,inants,outbase]
# 
# # plot the phase solutions from the phase-only calibration of the target
# old_plot_gsmphases.control.kind               =  recipe
# old_plot_gsmphases.control.type               =  executable_args
# old_plot_gsmphases.control.executable         =  {{ plotphases_script }}
# old_plot_gsmphases.control.max_per_node       =  {{ num_proc_per_node }}
# old_plot_gsmphases.control.mapfiles_in        =  [gsmcal_parmmap.output.mapfile,check_unflagged_map.output.mapfile]
# old_plot_gsmphases.control.inputkeys          =  [infile,outbase]
# old_plot_gsmphases.control.arguments          =  [-p,infile,outbase]
# 
# # generate a mapfile of all the diagnostic plots
# createmap_plots.control.kind            =   plugin
# createmap_plots.control.type            =   createMapfile
# createmap_plots.control.method          =   mapfile_from_folder
# createmap_plots.control.mapfile_dir     =   input.output.mapfile_dir
# createmap_plots.control.filename        =   diagnostic_plots.mapfile
# createmap_plots.control.folder          =   input.output.working_directory/input.output.job_name
# createmap_plots.control.pattern         =   *.png
# 
# # copy the diagnostic plots to the results_directory
# copy_plots.control.kind               =  recipe
# copy_plots.control.type               =  executable_args
# copy_plots.control.executable         =  /bin/cp
# copy_plots.control.max_per_node       =  {{ num_proc_per_node_limit }}
# copy_plots.control.mapfile_in         =  createmap_plots.output.mapfile
# copy_plots.control.inputkey           =  source
# copy_plots.control.arguments          =  [source,{{ inspection_directory }}]
# 
# # create the results directory if needed
# mk_results_dir.control.kind               =  plugin
# mk_results_dir.control.type               =  makeDirectory
# mk_results_dir.control.directory          =  {{ results_directory }}
# 
# # make mapfile with the filenames of the results that we want
# make_results_mapfile.control.kind            =  plugin
# make_results_mapfile.control.type            =  makeResultsMapfile
# make_results_mapfile.control.mapfile_dir     =  input.output.mapfile_dir
# make_results_mapfile.control.filename        =  make_results_mapfile.mapfile
# make_results_mapfile.control.mapfile_in      =  check_unflagged_map.output.mapfile
# make_results_mapfile.control.target_dir      =  {{ results_directory }}
# make_results_mapfile.control.make_target_dir =  True
# make_results_mapfile.control.new_suffix      =  .pre-cal.ms
# 
# # move the results to where we want them
# move_results.control.kind               =  recipe
# move_results.control.type               =  executable_args
# move_results.control.executable         =  /bin/mv
# move_results.control.max_per_node       =  {{ num_proc_per_node_limit }}
# move_results.control.mapfiles_in        =  [check_unflagged_map.output.mapfile,make_results_mapfile.output.mapfile]
# move_results.control.inputkeys          =  [source,destination]
# move_results.control.arguments          =  [source,destination]
# 
